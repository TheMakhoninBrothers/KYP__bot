import typing

from app.modules.user_record_module.schemas import RecordFromDB


async def create_response_for__main_info(chat_id: str, username: typing.Optional[str]) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ"""
    return f'BOT ID: {chat_id}\n' \
           f'USERNAME: {username}\n' \
           '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' \
           '/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' \
           '/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å\n' \
           '/get - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏\n' \
           '/get {–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏} - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏\n' \
           '/del {–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏} - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n' \
           '/hide - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n'


async def create_response_for__records(records: typing.List[RecordFromDB]) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π"""
    if records:
        text = [await create_response_for__record(record) for record in records]
        return '\n\n'.join(text)
    return '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'


async def create_response_for__record(record: RecordFromDB) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏"""
    return f'<b>–ó–∞–ø–∏—Å—å</b> {record.id}\n' \
           f'<b>–¢–µ–≥–∏:</b> {" ".join([f"#{tag}" for tag in record.tags])}\n' \
           f'{record.text}'


async def create_response_for__search_by_tags(records: typing.List[RecordFromDB], tags: typing.List[str]) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º"""
    head_text = f'üîç <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º:</b> #{" #".join(tags)}\n'
    if records:
        return f'{head_text}\n' \
               f'{await create_response_for__records(records)}'
    return f'{head_text}\n' \
           f'<i>–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>'
